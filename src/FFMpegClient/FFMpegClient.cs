//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v3.29.6049.41186 (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace DR.FFMpegClient
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public partial class AudioJobClient 
    {
        public AudioJobClient() : this("http://od01udv:9000") { }
    
        public AudioJobClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetAsync(string machineName)
        {
            return GetAsync(machineName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetAsync(string machineName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/AudioJob");
    
            if (machineName == null)
                throw new ArgumentNullException("machineName");
            url_ += string.Format("machineName={0}&", Uri.EscapeUriString(machineName != null ? machineName.ToString() : "null"));
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(object); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> PostAsync(AudioJobRequestModel input)
        {
            return PostAsync(input, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> PostAsync(AudioJobRequestModel input, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/AudioJob");
    
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(input));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(object); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> DeleteAsync(string jobId)
        {
            return DeleteAsync(jobId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> DeleteAsync(string jobId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/AudioJob");
    
            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ += string.Format("jobId={0}&", Uri.EscapeUriString(jobId != null ? jobId.ToString() : "null"));
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(object); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public partial class ClientClient 
    {
        public ClientClient() : this("http://od01udv:9000") { }
    
        public ClientClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ClientHeartbeat>> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ClientHeartbeat>> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Client");
    
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<ClientHeartbeat>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<ClientHeartbeat>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public partial class PauseClient 
    {
        public PauseClient() : this("http://od01udv:9000") { }
    
        public PauseClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PauseAsync(string jobId, Type type)
        {
            return PauseAsync(jobId, type, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PauseAsync(string jobId, Type type, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Pause");
    
            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ += string.Format("jobId={0}&", Uri.EscapeUriString(jobId != null ? jobId.ToString() : "null"));
            if (type == null)
                throw new ArgumentNullException("type");
            url_ += string.Format("type={0}&", Uri.EscapeUriString(type != null ? type.ToString() : "null"));
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PatchAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public partial class ResumeClient 
    {
        public ResumeClient() : this("http://od01udv:9000") { }
    
        public ResumeClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task ResumeAsync(string jobId, Type1 type)
        {
            return ResumeAsync(jobId, type, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task ResumeAsync(string jobId, Type1 type, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Resume");
    
            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ += string.Format("jobId={0}&", Uri.EscapeUriString(jobId != null ? jobId.ToString() : "null"));
            if (type == null)
                throw new ArgumentNullException("type");
            url_ += string.Format("type={0}&", Uri.EscapeUriString(type != null ? type.ToString() : "null"));
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PatchAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public partial class StatusClient 
    {
        public StatusClient() : this("http://od01udv:9000") { }
    
        public StatusClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Status");
    
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(object); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutAsync(BaseJob job)
        {
            return PutAsync(job, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutAsync(BaseJob job, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Status");
    
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(job));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PutAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "204") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetAsync(string id)
        {
            return GetAsync(id, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetAsync(string id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Status/{id}");
            if (id == null)
                throw new ArgumentNullException("id");
    
            url_ = url_.Replace("{id}", Uri.EscapeUriString(id.ToString()));
    
     
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(object); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public partial class AudioJobRequestModel : INotifyPropertyChanged
    { 
        private ObservableCollection<AudioDestinationFormat> _targets; 
        private string _sourceFilename; 
        private string _outputFolder; 
        private DateTime _needed; 
        private string _destinationFilenamePrefix; 
        private string _inpoint;
    
        [JsonProperty("Targets", Required = Required.Always)]
        [Required]
        public ObservableCollection<AudioDestinationFormat> Targets
        {
            get { return _targets; }
            set 
            {
                if (_targets != value)
                {
                    _targets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("SourceFilename", Required = Required.Always)]
        [Required]
        public string SourceFilename
        {
            get { return _sourceFilename; }
            set 
            {
                if (_sourceFilename != value)
                {
                    _sourceFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("OutputFolder", Required = Required.Always)]
        [Required]
        public string OutputFolder
        {
            get { return _outputFolder; }
            set 
            {
                if (_outputFolder != value)
                {
                    _outputFolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Needed", Required = Required.Always)]
        [Required]
        public DateTime Needed
        {
            get { return _needed; }
            set 
            {
                if (_needed != value)
                {
                    _needed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationFilenamePrefix", Required = Required.Default)]
        public string DestinationFilenamePrefix
        {
            get { return _destinationFilenamePrefix; }
            set 
            {
                if (_destinationFilenamePrefix != value)
                {
                    _destinationFilenamePrefix = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Inpoint", Required = Required.Default)]
        public string Inpoint
        {
            get { return _inpoint; }
            set 
            {
                if (_inpoint != value)
                {
                    _inpoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AudioJobRequestModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioJobRequestModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public partial class AudioDestinationFormat : INotifyPropertyChanged
    { 
        private AudioCodec _audioCodec; 
        private Format _format; 
        private int? _bitrate;
    
        [JsonProperty("AudioCodec", Required = Required.Default)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioCodec AudioCodec
        {
            get { return _audioCodec; }
            set 
            {
                if (_audioCodec != value)
                {
                    _audioCodec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Format", Required = Required.Default)]
        [JsonConverter(typeof(StringEnumConverter))]
        public Format Format
        {
            get { return _format; }
            set 
            {
                if (_format != value)
                {
                    _format = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Bitrate", Required = Required.Default)]
        public int? Bitrate
        {
            get { return _bitrate; }
            set 
            {
                if (_bitrate != value)
                {
                    _bitrate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AudioDestinationFormat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioDestinationFormat>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public partial class ClientHeartbeat : INotifyPropertyChanged
    { 
        private string _machineName; 
        private DateTime? _lastHeartbeat;
    
        [JsonProperty("MachineName", Required = Required.Default)]
        public string MachineName
        {
            get { return _machineName; }
            set 
            {
                if (_machineName != value)
                {
                    _machineName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("LastHeartbeat", Required = Required.Default)]
        public DateTime? LastHeartbeat
        {
            get { return _lastHeartbeat; }
            set 
            {
                if (_lastHeartbeat != value)
                {
                    _lastHeartbeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ClientHeartbeat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ClientHeartbeat>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public partial class BaseJob : INotifyPropertyChanged
    { 
        private string _jobCorrelationId; 
        private string _machineName; 
        private string _progress; 
        private bool? _done; 
        private int? _id; 
        private bool? _failed; 
        private State _state; 
        private string _sourceFilename; 
        private Type2 _type;
    
        [JsonProperty("JobCorrelationId", Required = Required.Default)]
        public string JobCorrelationId
        {
            get { return _jobCorrelationId; }
            set 
            {
                if (_jobCorrelationId != value)
                {
                    _jobCorrelationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("MachineName", Required = Required.Default)]
        public string MachineName
        {
            get { return _machineName; }
            set 
            {
                if (_machineName != value)
                {
                    _machineName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Progress", Required = Required.Default)]
        public string Progress
        {
            get { return _progress; }
            set 
            {
                if (_progress != value)
                {
                    _progress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Done", Required = Required.Default)]
        public bool? Done
        {
            get { return _done; }
            set 
            {
                if (_done != value)
                {
                    _done = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Id", Required = Required.Default)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Failed", Required = Required.Default)]
        public bool? Failed
        {
            get { return _failed; }
            set 
            {
                if (_failed != value)
                {
                    _failed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("State", Required = Required.Default)]
        [JsonConverter(typeof(StringEnumConverter))]
        public State State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("SourceFilename", Required = Required.Default)]
        public string SourceFilename
        {
            get { return _sourceFilename; }
            set 
            {
                if (_sourceFilename != value)
                {
                    _sourceFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Type", Required = Required.Default)]
        [JsonConverter(typeof(StringEnumConverter))]
        public Type2 Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static BaseJob FromJson(string data)
        {
            return JsonConvert.DeserializeObject<BaseJob>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum Type
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Audio")]
        Audio = 1,
    
        [EnumMember(Value = "Video")]
        Video = 2,
    
        [EnumMember(Value = "VideoMp4box")]
        VideoMp4box = 3,
    
        [EnumMember(Value = "VideoMerge")]
        VideoMerge = 4,
    
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum Type1
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Audio")]
        Audio = 1,
    
        [EnumMember(Value = "Video")]
        Video = 2,
    
        [EnumMember(Value = "VideoMp4box")]
        VideoMp4box = 3,
    
        [EnumMember(Value = "VideoMerge")]
        VideoMerge = 4,
    
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum AudioCodec
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "MP3")]
        MP3 = 1,
    
        [EnumMember(Value = "AAC")]
        AAC = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum Format
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "MP4")]
        MP4 = 1,
    
        [EnumMember(Value = "MKV")]
        MKV = 2,
    
        [EnumMember(Value = "AAC")]
        AAC = 3,
    
        [EnumMember(Value = "MP3")]
        MP3 = 4,
    
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum State
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Queued")]
        Queued = 1,
    
        [EnumMember(Value = "Paused")]
        Paused = 2,
    
        [EnumMember(Value = "InProgress")]
        InProgress = 3,
    
        [EnumMember(Value = "Done")]
        Done = 4,
    
        [EnumMember(Value = "Failed")]
        Failed = 5,
    
    }
    
    [GeneratedCode("NJsonSchema", "2.62.6049.40362")]
    public enum Type2
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Audio")]
        Audio = 1,
    
        [EnumMember(Value = "Video")]
        Video = 2,
    
        [EnumMember(Value = "VideoMp4box")]
        VideoMp4box = 3,
    
        [EnumMember(Value = "VideoMerge")]
        VideoMerge = 4,
    
    }

    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "3.29.6049.41186")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

    [GeneratedCode("NSwag", "3.29.6049.41186")]
    internal static class HttpExtensions
    {
        public static async Task<HttpResponseMessage> OptionsAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("OPTIONS");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> HeadAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("HEAD");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> PatchAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("PATCH");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }

        public static async Task<HttpResponseMessage> DeleteAsync(this HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken)
        {
            var method = new HttpMethod("DELETE");
            var request = new HttpRequestMessage(method, requestUri) { Content = content };
            return await client.SendAsync(request, cancellationToken);
        }
    }
}